{"ast":null,"code":"var e,\n    n = require(\"react\"),\n    t = (e = require(\"resize-observer-polyfill\")) && \"object\" == typeof e && \"default\" in e ? e.default : e;\n\nfunction r() {\n  return (r = Object.assign || function (e) {\n    for (var n = 1; n < arguments.length; n++) {\n      var t = arguments[n];\n\n      for (var r in t) {\n        Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);\n      }\n    }\n\n    return e;\n  }).apply(this, arguments);\n}\n\nvar i = \"undefined\" != typeof window && window.document && window.document.createElement ? n.useLayoutEffect : n.useEffect;\n\nmodule.exports = function (e) {\n  var o = void 0 === e ? {} : e,\n      c = o.maxFontSize,\n      u = void 0 === c ? 100 : c,\n      f = o.minFontSize,\n      a = void 0 === f ? 20 : f,\n      l = o.onFinish,\n      s = o.onStart,\n      S = o.resolution,\n      z = void 0 === S ? 5 : S,\n      d = n.useCallback(function () {\n    return {\n      calcKey: 0,\n      fontSize: u,\n      fontSizePrev: a,\n      fontSizeMax: u,\n      fontSizeMin: a\n    };\n  }, [u, a]),\n      v = n.useRef(null),\n      y = n.useRef(),\n      m = n.useRef(!1),\n      w = n.useState(d),\n      M = w[0],\n      h = w[1],\n      p = M.calcKey,\n      b = M.fontSize,\n      x = M.fontSizeMax,\n      K = M.fontSizeMin,\n      E = M.fontSizePrev,\n      F = null,\n      P = n.useState(function () {\n    return new t(function () {\n      F = window.requestAnimationFrame(function () {\n        m.current || (s && s(), m.current = !0, h(r({}, d(), {\n          calcKey: p + 1\n        })));\n      });\n    });\n  })[0];\n  n.useEffect(function () {\n    return v.current && P.observe(v.current), function () {\n      F && window.cancelAnimationFrame(F), P.disconnect();\n    };\n  }, [F, P]);\n  var g = v.current && v.current.innerHTML;\n  return n.useEffect(function () {\n    0 === p || m.current || (g !== y.current && (s && s(), h(r({}, d(), {\n      calcKey: p + 1\n    }))), y.current = g);\n  }, [p, d, g, s]), i(function () {\n    if (0 !== p) {\n      var e = Math.abs(b - E) <= z,\n          n = !!v.current && (v.current.scrollHeight > v.current.offsetHeight || v.current.scrollWidth > v.current.offsetWidth),\n          t = b > E;\n      if (e) n ? h({\n        fontSize: E < b ? E : b - (E - b),\n        fontSizeMax: x,\n        fontSizeMin: K,\n        fontSizePrev: E,\n        calcKey: p\n      }) : (m.current = !1, l && l(b));else {\n        var r,\n            i = x,\n            o = K;\n        n ? (r = t ? E - b : K - b, i = Math.min(x, b)) : (r = t ? x - b : E - b, o = Math.max(K, b)), h({\n          calcKey: p,\n          fontSize: b + r / 2,\n          fontSizeMax: i,\n          fontSizeMin: o,\n          fontSizePrev: b\n        });\n      }\n    }\n  }, [p, b, x, K, E, l, v, z]), {\n    fontSize: b + \"%\",\n    ref: v\n  };\n};","map":{"version":3,"sources":["../index.ts"],"names":["useIsoLayoutEffect","window","document","createElement","useLayoutEffect","useEffect","maxFontSize","minFontSize","onFinish","onStart","resolution","initState","useCallback","calcKey","fontSize","fontSizePrev","fontSizeMax","fontSizeMin","ref","useRef","innerHtmlPrevRef","isCalculatingRef","state","setState","useState","animationFrameId","ro","ResizeObserver","requestAnimationFrame","current","observe","cancelAnimationFrame","disconnect","innerHtml","innerHTML","isWithinResolution","Math","abs","isOverflow","scrollHeight","offsetHeight","scrollWidth","offsetWidth","isAsc","delta","newMax","newMin","min","max"],"mappings":"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","sourcesContent":["import {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nexport type TOptions = {\n  maxFontSize?: number;\n  minFontSize?: number;\n  onFinish?: (fontSize: number) => void;\n  onStart?: () => void;\n  resolution?: number;\n};\n\n// Suppress `useLayoutEffect` warning when rendering on the server\n// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsoLayoutEffect =\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n    ? useLayoutEffect\n    : useEffect;\n\nconst useFitText = ({\n  maxFontSize = 100,\n  minFontSize = 20,\n  onFinish,\n  onStart,\n  resolution = 5,\n}: TOptions = {}) => {\n  const initState = useCallback(() => {\n    return {\n      calcKey: 0,\n      fontSize: maxFontSize,\n      fontSizePrev: minFontSize,\n      fontSizeMax: maxFontSize,\n      fontSizeMin: minFontSize,\n    };\n  }, [maxFontSize, minFontSize]);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const innerHtmlPrevRef = useRef<string>();\n  const isCalculatingRef = useRef(false);\n  const [state, setState] = useState(initState);\n  const { calcKey, fontSize, fontSizeMax, fontSizeMin, fontSizePrev } = state;\n\n  // Montior div size changes and recalculate on resize\n  let animationFrameId: number | null = null;\n  const [ro] = useState(\n    () =>\n      new ResizeObserver(() => {\n        animationFrameId = window.requestAnimationFrame(() => {\n          if (isCalculatingRef.current) {\n            return;\n          }\n          onStart && onStart();\n          isCalculatingRef.current = true;\n          // `calcKey` is used in the dependencies array of\n          // `useIsoLayoutEffect` below. It is incremented so that the font size\n          // will be recalculated even if the previous state didn't change (e.g.\n          // when the text fit initially).\n          setState({\n            ...initState(),\n            calcKey: calcKey + 1,\n          });\n        });\n      }),\n  );\n\n  useEffect(() => {\n    if (ref.current) {\n      ro.observe(ref.current);\n    }\n    return () => {\n      animationFrameId && window.cancelAnimationFrame(animationFrameId);\n      ro.disconnect();\n    };\n  }, [animationFrameId, ro]);\n\n  // Recalculate when the div contents change\n  const innerHtml = ref.current && ref.current.innerHTML;\n  useEffect(() => {\n    if (calcKey === 0 || isCalculatingRef.current) {\n      return;\n    }\n    if (innerHtml !== innerHtmlPrevRef.current) {\n      onStart && onStart();\n      setState({\n        ...initState(),\n        calcKey: calcKey + 1,\n      });\n    }\n    innerHtmlPrevRef.current = innerHtml;\n  }, [calcKey, initState, innerHtml, onStart]);\n\n  // Check overflow and resize font\n  useIsoLayoutEffect(() => {\n    // Don't start calculating font size until the `resizeKey` is incremented\n    // above in the `ResizeObserver` callback. This avoids an extra resize\n    // on initialization.\n    if (calcKey === 0) {\n      return;\n    }\n\n    const isWithinResolution = Math.abs(fontSize - fontSizePrev) <= resolution;\n    const isOverflow =\n      !!ref.current &&\n      (ref.current.scrollHeight > ref.current.offsetHeight ||\n        ref.current.scrollWidth > ref.current.offsetWidth);\n    const isAsc = fontSize > fontSizePrev;\n\n    // Return if the font size has been adjusted \"enough\" (change within `resolution`)\n    // reduce font size by one increment if it's overflowing.\n    if (isWithinResolution) {\n      if (isOverflow) {\n        const fontSizeNew =\n          fontSizePrev < fontSize\n            ? fontSizePrev\n            : fontSize - (fontSizePrev - fontSize);\n        setState({\n          fontSize: fontSizeNew,\n          fontSizeMax,\n          fontSizeMin,\n          fontSizePrev,\n          calcKey,\n        });\n      } else {\n        isCalculatingRef.current = false;\n        onFinish && onFinish(fontSize);\n      }\n      return;\n    }\n\n    // Binary search to adjust font size\n    let delta: number;\n    let newMax = fontSizeMax;\n    let newMin = fontSizeMin;\n    if (isOverflow) {\n      delta = isAsc ? fontSizePrev - fontSize : fontSizeMin - fontSize;\n      newMax = Math.min(fontSizeMax, fontSize);\n    } else {\n      delta = isAsc ? fontSizeMax - fontSize : fontSizePrev - fontSize;\n      newMin = Math.max(fontSizeMin, fontSize);\n    }\n    setState({\n      calcKey,\n      fontSize: fontSize + delta / 2,\n      fontSizeMax: newMax,\n      fontSizeMin: newMin,\n      fontSizePrev: fontSize,\n    });\n  }, [\n    calcKey,\n    fontSize,\n    fontSizeMax,\n    fontSizeMin,\n    fontSizePrev,\n    onFinish,\n    ref,\n    resolution,\n  ]);\n\n  return { fontSize: `${fontSize}%`, ref };\n};\n\nexport default useFitText;\n"]},"metadata":{},"sourceType":"script"}